import java.time.LocalDate;
import java.time.LocalTime;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

class StreamAPITutorial {

        private static final int PAGE_SIZE = 5;
        private static final int PAGE_NUMBER = 1;

        public record Item(String name, int quantity) {
        }

        public record Transaction(String transactionId, LocalDate date, LocalTime time, List<Item> items,
                        String paymentMethod, String transactionType, String transactionStatus, String customerType,
                        String storeSection) {
        }

        // Summary record to hold computed values
        public record TransactionSummary(
                        long totalTransactions,
                        long completedTransactions,
                        String firstTransactionId,
                        long uniqueStoreSections,
                        boolean anyCreditCard,
                        boolean allCompleted,
                        String mostUsedPaymentMethod,
                        int totalItemsSold) {
        }

        public static void main(String[] args) {

                List<Transaction> transactions = getMonthlyTransactions();

                // Generate summary insights
                printSummary(transactions);

                // Display paginated transaction report
                printPaginatedTransactions(transactions, PAGE_NUMBER, PAGE_SIZE);

        }

        private static void printPaginatedTransactions(List<Transaction> transactions, int pageNumber, int pageSize) {
                final int skipCount = (pageNumber - 1) * pageSize;
                final int totalPages = (int) Math.ceil((double) transactions.size() / pageSize);

                List<String[]> rows = transactions.stream()
                                .skip(skipCount)
                                .limit(pageSize)
                                .map(StreamAPITutorial::recordToRow)
                                .toList();

                String[] headers = {
                                "Transaction ID", "Date", "Time", "Items",
                                "Payment Method", "Transaction Type",
                                "Transaction Status", "Customer Type", "Store Section"
                };

                printTable("Transaction History", headers, rows, pageNumber, totalPages);
        }

        private static String[] recordToRow(Transaction tx) {
                String itemSummary = tx.items().stream()
                                .map(item -> item.name() + " x " + item.quantity())
                                .collect(Collectors.joining(", "));

                return new String[] {
                                tx.transactionId(),
                                tx.date().toString(),
                                tx.time().toString(),
                                itemSummary,
                                tx.paymentMethod(),
                                tx.transactionType(),
                                tx.transactionStatus(),
                                tx.customerType(),
                                tx.storeSection()
                };
        }

        /**
         * Generates a dummy list of grocery transactions for demonstration purposes.
         * 
         * Note: The content of this dataset has been generated by ChatGPT
         * to simulate realistic transaction data for tutorial and testing use cases.
         */

        public static List<Transaction> getMonthlyTransactions() {
                return List.of(
                                new Transaction("TXN-0001", LocalDate.of(2025, 6, 1), LocalTime.of(10, 15),
                                                List.of(new Item("milk", 2), new Item("bread", 1)), "Cash", "In-Store",
                                                "Completed", "Regular",
                                                "Mixed"),
                                new Transaction("TXN-0002", LocalDate.of(2025, 6, 2), LocalTime.of(11, 40),
                                                List.of(new Item("yogurt", 3)), "Credit Card", "Online", "Completed",
                                                "New", "Dairy"),
                                new Transaction("TXN-0003", LocalDate.of(2025, 6, 3), LocalTime.of(9, 5),
                                                List.of(new Item("bread", 1), new Item("egg", 6),
                                                                new Item("butter", 1)),
                                                "Debit Card",
                                                "In-Store", "Completed", "Regular", "Mixed"),
                                new Transaction("TXN-0004", LocalDate.of(2025, 6, 4), LocalTime.of(14, 30),
                                                List.of(new Item("chocolate", 2)), "Mobile Payment", "Online",
                                                "Pending", "New", "Pantry"),
                                new Transaction("TXN-0005", LocalDate.of(2025, 6, 5), LocalTime.of(16, 10),
                                                List.of(new Item("butter", 1), new Item("milk", 1),
                                                                new Item("yogurt", 1)),
                                                "Cash", "In-Store",
                                                "Completed", "Regular", "Dairy"),
                                new Transaction("TXN-0006", LocalDate.of(2025, 6, 6), LocalTime.of(10, 25),
                                                List.of(new Item("rice", 2)), "Credit Card", "Online", "Returned",
                                                "New", "Pantry"),
                                new Transaction("TXN-0007", LocalDate.of(2025, 6, 7), LocalTime.of(15, 45),
                                                List.of(new Item("bread", 1), new Item("butter", 1)), "Cash",
                                                "In-Store", "Completed",
                                                "Regular", "Bakery"),
                                new Transaction("TXN-0008", LocalDate.of(2025, 6, 8), LocalTime.of(13, 5),
                                                List.of(new Item("egg", 12), new Item("milk", 1)), "Mobile Payment",
                                                "Online", "Completed",
                                                "New", "Mixed"),
                                new Transaction("TXN-0009", LocalDate.of(2025, 6, 9), LocalTime.of(10, 50),
                                                List.of(new Item("yogurt", 2), new Item("chocolate", 1)), "Credit Card",
                                                "In-Store",
                                                "Completed", "Regular", "Mixed"),
                                new Transaction("TXN-0010", LocalDate.of(2025, 6, 10), LocalTime.of(13, 35),
                                                List.of(new Item("rice", 1), new Item("egg", 6)), "Debit Card",
                                                "Online", "Pending", "New",
                                                "Pantry"),
                                new Transaction("TXN-0011", LocalDate.of(2025, 6, 11), LocalTime.of(12, 20),
                                                List.of(new Item("bread", 1), new Item("milk", 1)), "Cash", "In-Store",
                                                "Completed", "Regular",
                                                "Mixed"),
                                new Transaction("TXN-0012", LocalDate.of(2025, 6, 12), LocalTime.of(11, 0),
                                                List.of(new Item("yogurt", 2)), "Credit Card", "Online", "Returned",
                                                "New", "Dairy"),
                                new Transaction("TXN-0013", LocalDate.of(2025, 6, 13), LocalTime.of(9, 30),
                                                List.of(new Item("egg", 6)),
                                                "Debit Card", "In-Store", "Completed", "Regular", "Pantry"),
                                new Transaction("TXN-0014", LocalDate.of(2025, 6, 14), LocalTime.of(15, 15),
                                                List.of(new Item("butter", 2), new Item("chocolate", 1)),
                                                "Mobile Payment", "Online",
                                                "Completed", "New", "Mixed"),
                                new Transaction("TXN-0015", LocalDate.of(2025, 6, 15), LocalTime.of(17, 50),
                                                List.of(new Item("rice", 1), new Item("milk", 2)), "Cash", "In-Store",
                                                "Completed", "Regular",
                                                "Mixed"),
                                new Transaction("TXN-0016", LocalDate.of(2025, 6, 16), LocalTime.of(10, 5),
                                                List.of(new Item("bread", 2)), "Credit Card", "Online", "Completed",
                                                "New", "Bakery"),
                                new Transaction("TXN-0017", LocalDate.of(2025, 6, 17), LocalTime.of(14, 45),
                                                List.of(new Item("yogurt", 1), new Item("milk", 1)), "Debit Card",
                                                "In-Store", "Pending",
                                                "Regular", "Dairy"),
                                new Transaction("TXN-0018", LocalDate.of(2025, 6, 18), LocalTime.of(13, 10),
                                                List.of(new Item("butter", 1), new Item("chocolate", 2)),
                                                "Mobile Payment", "Online",
                                                "Completed", "New", "Mixed"),
                                new Transaction("TXN-0019", LocalDate.of(2025, 6, 19), LocalTime.of(16, 0),
                                                List.of(new Item("egg", 12)), "Cash", "In-Store", "Completed",
                                                "Regular", "Pantry"),
                                new Transaction("TXN-0020", LocalDate.of(2025, 6, 20), LocalTime.of(11, 25),
                                                List.of(new Item("milk", 1), new Item("rice", 1)), "Credit Card",
                                                "Online", "Returned", "New",
                                                "Mixed"),
                                new Transaction("TXN-0021", LocalDate.of(2025, 6, 21), LocalTime.of(9, 45),
                                                List.of(new Item("bread", 1), new Item("butter", 1)), "Debit Card",
                                                "In-Store", "Completed",
                                                "Regular", "Bakery"),
                                new Transaction("TXN-0022", LocalDate.of(2025, 6, 22), LocalTime.of(14, 10),
                                                List.of(new Item("chocolate", 3)), "Mobile Payment", "Online",
                                                "Completed", "New", "Pantry"),
                                new Transaction("TXN-0023", LocalDate.of(2025, 6, 23), LocalTime.of(12, 35),
                                                List.of(new Item("yogurt", 2), new Item("egg", 6)), "Cash", "In-Store",
                                                "Completed", "Regular",
                                                "Mixed"),
                                new Transaction("TXN-0024", LocalDate.of(2025, 6, 24), LocalTime.of(10, 15),
                                                List.of(new Item("milk", 2)), "Credit Card", "Online", "Completed",
                                                "New", "Dairy"),
                                new Transaction("TXN-0025", LocalDate.of(2025, 6, 25), LocalTime.of(11, 50),
                                                List.of(new Item("rice", 1), new Item("chocolate", 1)), "Debit Card",
                                                "In-Store", "Pending",
                                                "Regular", "Mixed"),
                                new Transaction("TXN-0026", LocalDate.of(2025, 6, 26), LocalTime.of(13, 5),
                                                List.of(new Item("bread", 1), new Item("milk", 1)), "Mobile Payment",
                                                "Online", "Completed",
                                                "New", "Mixed"),
                                new Transaction("TXN-0027", LocalDate.of(2025, 6, 27), LocalTime.of(14, 20),
                                                List.of(new Item("egg", 12), new Item("butter", 1)), "Cash", "In-Store",
                                                "Completed", "Regular",
                                                "Mixed"),
                                new Transaction("TXN-0028", LocalDate.of(2025, 6, 28), LocalTime.of(16, 40),
                                                List.of(new Item("yogurt", 1)), "Credit Card", "Online", "Returned",
                                                "New", "Dairy"),
                                new Transaction("TXN-0029", LocalDate.of(2025, 6, 29), LocalTime.of(15, 30),
                                                List.of(new Item("bread", 1), new Item("chocolate", 1)), "Debit Card",
                                                "In-Store", "Completed",
                                                "Regular", "Bakery"),
                                new Transaction("TXN-0030", LocalDate.of(2025, 6, 30), LocalTime.of(17, 55),
                                                List.of(new Item("milk", 2), new Item("egg", 6)), "Mobile Payment",
                                                "Online", "Completed",
                                                "New", "Mixed"));
        }

        static void printTable(String reportTitle, String[] headers, List<String[]> rows, int pageNumber,
                        int totalPages) {
                // Calculate column widths based on headers and rows
                int[] widths = new int[headers.length];
                Arrays.setAll(widths, i -> headers[i].length());
                rows.forEach(row -> Arrays.setAll(widths, i -> Math.max(widths[i], row[i].length())));

                // Build the format string for each row
                StringBuilder format = new StringBuilder();
                for (int width : widths)
                        format.append("| %-" + width + "s ");
                format.append("|%n");

                // Build the separator line
                String separator = Arrays.stream(widths)
                                .mapToObj(w -> "-".repeat(w + 2))
                                .collect(Collectors.joining("+", "+", "+"));

                // Print the report title (centered)
                System.out.println("\n" + centerText(reportTitle.toUpperCase(), separator.length()));
                System.out.println(separator);
                System.out.printf(format.toString(), (Object[]) headers);
                System.out.println(separator);

                // Print each row
                for (String[] row : rows) {
                        System.out.printf(format.toString(), (Object[]) row);
                }

                // Footer separator
                System.out.println(separator);

                // Centered page number display
                String pageInfo = "Page " + pageNumber + " / " + totalPages;
                System.out.println(centerText(pageInfo, separator.length()));
                System.out.println("\n\n\n\n\n\n\n\n");
        }

        static String centerText(String text, int width) {
                int padding = (width - text.length()) / 2;
                return " ".repeat(Math.max(0, padding)) + text;
        }

        public static void printSummary(List<Transaction> transactions) {
                // Total number of transactions using count()
                long totalCount = transactions.stream()
                                .count(); // Terminal operation: count()

                // Number of completed transactions using filter() and count()
                long completedCount = transactions.stream()
                                .filter(tx -> tx.transactionStatus().equalsIgnoreCase("completed")) // Intermediate:
                                                                                                    // filter()
                                .count(); // Terminal: count()

                // First transaction by date & time using sorted() and findFirst()
                String firstTransactionId = transactions.stream()
                                .sorted(Comparator.comparing(Transaction::date)
                                                .thenComparing(Transaction::time)) // Intermediate: sorted()
                                .findFirst() // Terminal: findFirst()
                                .map(Transaction::transactionId)
                                .orElse("N/A");

                // Count of unique store sections using map(), distinct(), and count()
                long uniqueSections = transactions.stream()
                                .map(Transaction::storeSection) // Intermediate: map()
                                .distinct() // Intermediate: distinct()
                                .count(); // Terminal: count()

                // Check if any transaction was paid by credit card using anyMatch()
                boolean anyCreditCard = transactions.stream()
                                .anyMatch(tx -> tx.paymentMethod().equalsIgnoreCase("credit card")); // Terminal:
                                                                                                     // anyMatch()

                // Check if all transactions are completed using allMatch()
                boolean allCompleted = transactions.stream()
                                .allMatch(tx -> tx.transactionStatus().equalsIgnoreCase("completed")); // Terminal:
                                                                                                       // allMatch()

                // Determine the most used payment method using groupingBy() and counting()
                String mostUsedPaymentMethod = transactions.stream()
                                .collect(Collectors.groupingBy(Transaction::paymentMethod, Collectors.counting()))
                                // Collector: groupingBy() with downstream counting()
                                .entrySet().stream()
                                .max(Map.Entry.comparingByValue()) // Stream over entrySet: max()
                                .map(Map.Entry::getKey)
                                .orElse("N/A");

                // Calculate total items sold using flatMap(), mapToInt(), and sum()
                int totalItemsSold = transactions.stream()
                                .flatMap(tx -> tx.items().stream()) // Intermediate: flatMap() to flatten item lists
                                .mapToInt(Item::quantity) // Intermediate: mapToInt() to extract quantities
                                .sum(); // Terminal: sum()

                // Create a summary record with all insights
                TransactionSummary summary = new TransactionSummary(
                                totalCount,
                                completedCount,
                                firstTransactionId,
                                uniqueSections,
                                anyCreditCard,
                                allCompleted,
                                mostUsedPaymentMethod,
                                totalItemsSold);
                // Print formatted grid output
                printGrid(summary);
        }

        public static void printGrid(TransactionSummary summary) {

                System.out.println("\n" + centerText("SUMMARY INSIGHTS", 160));
                System.out.println("-".repeat(160) + "\n");
                // Prepare key-value pairs
                String[] fields = new String[] {
                                "Total Transactions", String.valueOf(summary.totalTransactions()),
                                "Completed Transactions", String.valueOf(summary.completedTransactions()),
                                "First Transaction ID", summary.firstTransactionId(),
                                "Unique Store Sections", String.valueOf(summary.uniqueStoreSections()),
                                "Any Credit Card", summary.anyCreditCard() ? "Yes" : "No",
                                "All Transactions Completed", summary.allCompleted() ? "Yes" : "No",
                                "Most Used Payment Method", summary.mostUsedPaymentMethod(),
                                "Total Items Sold", String.valueOf(summary.totalItemsSold())
                };

                int maxLineLength = 150; // Limit total line length
                int i = 0;
                StringBuilder line = new StringBuilder();

                while (i < fields.length) {
                        // Format key-value with fixed column width, aligned to the left
                        String entry = String.format("%-25s: %-18s", fields[i], fields[i + 1]);

                        // Check if adding this entry exceeds line length
                        if (line.length() + entry.length() > maxLineLength) {
                                System.out.println(line);
                                line.setLength(0);
                        }

                        // Append spacing if this is not the first entry in the line
                        if (line.length() > 0)
                                line.append("  ");

                        line.append(entry);
                        i += 2;
                }

                // Print remaining line if any
                if (line.length() > 0) {
                        System.out.println(line);
                }
        }

}